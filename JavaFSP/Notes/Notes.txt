In java when an object looses its reference that object is considered in no longer in use. Such kinds of un-refernce objects are called garbage in java.
JVM keeps track of such kind of un-reference objects and remove them from memory automatically when required. This mechanism of automatic removal of un-
-reference objects by JVM is called garbage collection. The time for garbage collection can not be predicted in advance.

Short Note:- A particular object can have more than one references but a single reference variable cannot point to 2 objects at the same time.

Inheritance
It is the mechanism by which one class aquires the features of another class. Through inheritance java supports the concept of code reusability.

Types of inheritance:-
1. Single Level Inheritance
2. Multilevel Inheritance
3. Multiple Inheritance
4. Hierarchial
5. Hybrid

Single Level Inheritance
 A  Parent/Super/Base
 |
 v
 B  Child/Sub/Derived

In Single Level Inheritance one class is derived from another class. The class from which one class is derived is called Parent/Super/Base class and the class 
which is derived is called Child/Sub/Derived class

Multilevel Inheritance

 A  Parent of A/ Grandparent of C
 |
 v
 B  Child of A/ Parent of C
 |
 v
 B  Child of C/ Grandchild of A
 Here one class is derieved from another class, and from that derived class another class is derived

 Hybrid Inheritance
 Hybrid Inheritance is the collection of all the above inheritances except Multiple inheritance.
   A  
 |   |
 v   v 
 B   C
     

Variable overding
If a child class variable has the same name as that of the parent class variable then the variable of the child class tends to hide the variable of its parent class, 
this mechanism is called variable overriding.
In order to access the hidden parent class variable in the child class we require the help of super keyword. Through variable overriding java supports the concept of polymorphism

Method overding
In java it is possible for a method in the child class to have the same name as that of method in the parent class. This mechanism is called method overriding where the child class method hide the 
parent class method. In order to access the hidden parent class method in the child class we require the help of super keyword. Using Method overding, java supports the concept of polymorphism.

What is the use of super keyword?
If a parent class member is hidden by a child class member then in order to access the hidden parent class member in the child class we require the help of super keyword.

Use of final keyword
It have 3 uses:-
1. To create a naming constant.
2. To prevent method overriding.
3. To prevent inheritance of a class.

Use of this keyword
If a instance variable has the same name as that of the local variable then the local variable tends to hide the instance variable of the class. In order to resolve this name space 
collision we require the help of this keyword. this is a keyword which always refers to the instance variable of the class. 

If we want to create a global variable in java forcefully, how it can be done.
If we declare a variable using the keyword public, stactic and final then that variable acts like a global variable

Use of super method
A parent class constructor is not inherited to its child class. In order to call the parent class constructor from the child class, we require the help of super method.

Rules for using super method
1. A super method call should always be present inside the child class constructor.
2. The super method call should be the first statement inside the child class constructor.

What is the difference between method overloading and method overriding
Method overloading:- 
1.Here all the methods belong to the same class. 
2. All the methods differ in the argument list
Method overriding:- 
1. If one belong to the parent class then other method belong to its child class.
2. The methods does not differ in the argument list

Abstract Class
An Abstract Class is a class which has Abstract keyword applied to it.
An Abstract Class may contain normal methods as well as abstract methods. An abstract method is a method which does not have any body.
An Abstract Class always act as a super class.
We cannot create an object of an abstract class. The childd class which extends an abstract class has to provide a body to all the abstract methods of the abstract class.
Using abstract class we can create a blueprint of a code.

Disadvantage of Abstract Class
An Abstract Class does not create a pure blueprint of a code

Interface
An Interface is a special type of class where the variables are by default static and final and the methods are by default public and abstract. 
We canot create an object of a interface.
The class which is used to implement and interface has to provid body to all the abstract method of the interface.
An interface is used to support multiple inheriance in java indirectly and it is also used to create a pure blueprint of a code.
       SYNTAX:
interface interfacename {
  static and final variable declaration
  public and abstract method
}
       SYNTAX of a class implementing an interface:
class classname implements interfacename1, interfacename1, .... {
  body of the class
}

Functional interface
An interface which consist only one abscrat is called as Functional interface

Note: - A parent class reference variable can refer to any child class object but the vice versa is not true.

Dynamic method dispatch
Dynamic method dispatch is a mechanism by which calls to overriden method are resolved at runtime. 
It is through Dynamic method dispatch java implents the concept of runtime polymorphism.

Compile time polymorphism is implemented suing concepts like method overloading and constructor overloading.
A Compile time polymorphism is also termed as Early binding.
A run time polymorphism is implemented using the concept of Dynamic method dispatch.
A run time polymorphism is also called as late binding.

---------------------------------------------------------------------------------------
Package in java
A Package in java maybe defined as a collection of classes, interfaces, as well as other Package.
A Package is used in order to create library in java.

A Package is used for 2 reasons: -
1. To perform code reusability.
2. In order to provide data security.

In order to get all the 6 classes we need to import all the 3 statements together
*---> All classes
import abc.*; // a,b 
  import abc.xyz.*; // x,y
    import abc.xyz.mno.*; // m,n 
      import abc.xyz.y; // y

Types of package access in java
A package access can be classified into 5 Types: -
1. Same Package Same Class
2. Same Package Sub Class
3. Same Package Nonsub Class
4. Different Package Sub Class
5. Different Package Nonsub Class

Same Package Same Class
SPSC
|-------control.java
P1
|
Abc.java

In case of same package same class all the variables are accessible irrespective of their access specifier.

Same Package Sub Class
SPBC
|-------control.java
P1
|
abc.java
|
xyz.java
A private variable is not inherited to the child class

Same Package Nonsub Class
        SPNSBC
        |-------control.java
        P1
  |           |
abc.java    xyz.java   

Different Package Sub Class
        DPSC
  |             |-------control.java
  P1            P2
  |             |
  abc.java ->   xyz.java

A default variable is only accessible within the same package

Different Package Nonsub Class
        DPNSBC
  |             |-------control.java
  P1            P2
  |             |
  abc.java ->   xyz.java

If a variable has private access then that variable is accessible only by the methods which belong to the same class as that of the variable
if a variable has public access then it is accessable for anyware in the code.
if we doesn't writew any access specifier befire a variable declaration the that variable is said to have adefault access.a variable with 
default access is only acesable the call which contains the variable and the class which contains method both belongs fromthe same class.

Exception Handling

In java Exception is nothing but the runtime error. When an Exception occurs in java it is the jvm which by default handles the Exception.
JVM stops the execution of the program at that line which generates the Exception. 
In order to stop this from happening we as a coder needs to handle the exception on our own. That is why it is called as exception Handling
In Java we can handle the exception using 5 keywords: -
1. try
2. catch
3. throw
4. throws
5. finally

Use of try and catch block
A try is block which contain those statements which may or maynot generatesa exception.
A try block is always followed by one catch block.
When an exception is occurred in the try block the program control comes out from the try block and goes to the matching catch block.It is inside the catch block where we have to write the 
exception handling code.
      Object
        |
      Throwable
      |       |
    error     Exception

A single try block may be followed by multiple catch blocks. Based on the nature of the exception appropriate catch blocks will be called.








User Defined Exception
In java it is possible to create our own exception class names provided that exception class extends the parent exception class.


Thread in java
A thread may be defined as smallest unit of a process which can run INDEPENDENTLY. 
Using thread java support the concept of multitasking.
In java a tread is created using a thread class. Every thread contains a name and a priority level.
The priority level of a thread ranges from 1-10, where 1 is the minimum priority and 10 is the maximum priority.
The default priority of a thread is 5.

Ways for creating a Thread
1. Implementing Runnable Interface
2. Extending the Thread class

It is inside the thread class that we have to write the code which will execute when the thread is started.


If we create a thread by extending the thread class, then that class will not be able to extend any other class simultaneously is needed, this is because java does not support multiple inheriance.
But if we create a thread by implementing the runnable interface then that class still has the option to extend anyother class if needed.
That is why we can say that creating a thread by implementing runable interface is the best.

Various States of a Thread
A Thread consist of following 5 steps:-
1. New :- This is the state where the tread is first created. eg:- Thread t = new Thread();
2. Active:- This is the state where the thread is ready to run. eg:- t.start();
3. Running:- This is the state where the thread is actually executing. eg:- execution of the run method.
4. Blocked:- This is the state where the execution of the thread is suspended. eg:- Thread.sleep();
5. Terminated:- This is the state where the thread has completed its execution. eg:- t.stop();







If the character whose index position is searched occurs multiple time in the string then the index position of the first occurrence of the character from the left hand side of the string is returned.
The lastIndexOf method returns the index position of the last occurrence of the character in the string.
If the character whose index position is searched occurs multiple time in the string then the index position of the last occurrence of the character from the left hand side of the string is returned.
The lastIndexOf method returns the index position of the last occurrence of the character in the string.
If the character whose index position is searched does not occur in the string then the method returns -1.

Replace method
The replace method is used to replace the old character with the new character in the string.

Trim method
The trim method is used to remove the white spaces from the both the ends of the string.

String Buffered
String Buffer class is a mutable class. This is because any changes made to a particular string object affect the original object.
The string buffer class is not thread safe. No new object with the change value is created.
The String buffer class contain many methods which can be used to modify the string object.
1. append() : concatinate 2 string together
2. insert() : insert a character/string at a particular position in a given string (Based on the index position)
3. delete() : delete a character/string at a particular position in a given string
4. reverse() : reverse the string
5. replace() : replace a character/string at a particular position in a given string


Applet
Applet is a java program using which java implents the concept of graphics.
The applet is a java program which contains the code for the graphics.
The main diffrence between a normal program and an applet is that a normal program has a main method but in applet we does not have a main method.
As applet does not have a main method it follows a life cycle.
The life cycle of an applet is as follows:-
1. Applet is initialized : init()
2. Applet is started : start()
3. Applet is stopped : stop()
4. Applet is painted : paint()
5. Applet is destroyed : destroy()


 Java Collection Framework
 Java collection is a framework which is used to implement the use of ds in java. It consist of various classes and interfaces using which java implements searching, sorting, insertion, deletion operations in a data structures.

Java Collection Framework Architecture

Collection Interface
List Interface
|-> ArrayList
|-> LinkedList
|-> Vector
Set Interface
|-> HashSet
|-> LinkedHashSet
|-> TreeSet
Queue Interface

Stack
The Stack is the subclass of Vector. It implements the lIFO.
The stacks contains all of the mothods of vector class and also provide its methods like boolean push(), pop() which defines its properties.
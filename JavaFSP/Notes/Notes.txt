In java when an object looses its reference that object is considered in no longer in use. Such kinds of un-refernce objects are called garbage in java.
JVM keeps track of such kind of un-reference objects and remove them from memory automatically when required. This mechanism of automatic removal of un-
-reference objects by JVM is called garbage collection. The time for garbage collection can not be predicted in advance.

Short Note:- A particular object can have more than one references but a single reference variable cannot point to 2 objects at the same time.

Inheritance
It is the mechanism by which one class aquires the features of another class. Through inheritance java supports the concept of code reusability.

Types of inheritance:-
1. Single Level Inheritance
2. Multilevel Inheritance
3. Multiple Inheritance
4. Hierarchial
5. Hybrid

Single Level Inheritance
 A  Parent/Super/Base
 |
 v
 B  Child/Sub/Derived

In Single Level Inheritance one class is derived from another class. The class from which one class is derived is called Parent/Super/Base class and the class 
which is derived is called Child/Sub/Derived class

Multilevel Inheritance

 A  Parent of A/ Grandparent of C
 |
 v
 B  Child of A/ Parent of C
 |
 v
 B  Child of C/ Grandchild of A
 Here one class is derieved from another class, and from that derived class another class is derived

 Hybrid Inheritance
 Hybrid Inheritance is the collection of all the above inheritances except Multiple inheritance.
   A  
 |   |
 v   v 
 B   C
     

Variable overding
If a child class variable has the same name as that of the parent class variable then the variable of the child class tends to hide the variable of its parent class, 
this mechanism is called variable overriding.
In order to access the hidden parent class variable in the child class we require the help of super keyword. Through variable overriding java supports the concept of polymorphism

Method overding
In java it is possible for a method in the child class to have the same name as that of method in the parent class. This mechanism is called method overriding where the child class method hide the 
parent class method. In order to access the hidden parent class method in the child class we require the help of super keyword. Using Method overding, java supports the concept of polymorphism.

What is the use of super keyword?
If a parent class member is hidden by a child class member then in order to access the hidden parent class member in the child class we require the help of super keyword.

Use of final keyword
It have 3 uses:-
1. To create a naming constant.
2. To prevent method overriding.
3. To prevent inheritance of a class.

Use of this keyword
If a instance variable has the same name as that of the local variable then the local variable tends to hide the instance variable of the class. In order to resolve this name space 
collision we require the help of this keyword. this is a keyword which always refers to the instance variable of the class. 

If we want to create a global variable in java forcefully, how it can be done.
If we declare a variable using the keyword public, stactic and final then that variable acts like a global variable

Use of super method
A parent class constructor is not inherited to its child class. In order to call the parent class constructor from the child class, we require the help of super method.

Rules for using super method
1. A super method call should always be present inside the child class constructor.
2. The super method call should be the first statement inside the child class constructor.

What is the difference between method overloading and method overriding
Method overloading:- 
1.Here all the methods belong to the same class. 
2. All the methods differ in the argument list
Method overriding:- 
1. If one belong to the parent class then other method belong to its child class.
2. The methods does not differ in the argument list

Abstract Class
An Abstract Class is a class which has Abstract keyword applied to it.
An Abstract Class may contain normal methods as well as abstract methods. An abstract method is a method which does not have any body.
An Abstract Class always act as a super class.
We cannot create an object of an abstract class. The childd class which extends an abstract class has to provide a body to all the abstract methods of the abstract class.
Using abstract class we can create a blueprint of a code.

Disadvantage of Abstract Class
An Abstract Class does not create a pure blueprint of a code

Interface
An Interface is a special type of class where the variables are by default static and final and the methods are by default public and abstract. 
We canot create an object of a interface.
The class which is used to implement and interface has to provid body to all the abstract method of the interface.
An interface is used to support multiple inheriance in java indirectly and it is also used to create a pure blueprint of a code.
       SYNTAX:
interface interfacename {
  static and final variable declaration
  public and abstract method
}
       SYNTAX of a class implementing an interface:
class classname implements interfacename1, interfacename1, .... {
  body of the class
}

Functional interface
An interface which consist only one abscrat is called as Functional interface

Note: - A parent class reference variable can refer to any child class object but the vice versa is not true.

Dynamic method dispatch
Dynamic method dispatch is a mechanism by which calls to overriden method are resolved at runtime. 
It is through Dynamic method dispatch java implents the concept of runtime polymorphism.

Compile time polymorphism is implemented suing concepts like method overloading and constructor overloading.
A Compile time polymorphism is also termed as Early binding.
A run time polymorphism is implemented using the concept of Dynamic method dispatch.
A run time polymorphism is also called as late binding.
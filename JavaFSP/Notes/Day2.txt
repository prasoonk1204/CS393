In java when an object looses its reference that object is considered in no longer in use. Such kinds of un-refernce objects are called garbage in java.
JVM keeps track of such kind of un-reference objects and remove them from memory automatically when required. This mechanism of automatic removal of un-
-reference objects by JVM is called garbage collection. The time for garbage collection can not be predicted in advance.

Short Note:- A particular object can have more than one references but a single reference variable cannot point to 2 objects at the same time.

Inheritance
It is the mechanism by which one class aquires the features of another class. Through inheritance java supports the concept of code reusability.

Types of inheritance:-
1. Single Level Inheritance
2. Multilevel Inheritance
3. Multiple Inheritance
4. Hierarchial
5. Hybrid

Single Level Inheritance
 A  Parent/Super/Base
 |
 v
 B  Child/Sub/Derived

In Single Level Inheritance one class is derived from another class. The class from which one class is derived is called Parent/Super/Base class and the class 
which is derived is called Child/Sub/Derived class

Multilevel Inheritance

 A  Parent of A/ Grandparent of C
 |
 v
 B  Child of A/ Parent of C
 |
 v
 B  Child of C/ Grandchild of A
 Here one class is derieved from another class, and from that derived class another class is derived

 Hybrid Inheritance
 Hybrid Inheritance is the collection of all the above inheritances except Multiple inheritance.
   A  
 |   |
 v   v 
 B   C
     

Variable overding
If a child class variable has the same name as that of the parent class variable then the variable of the child class tends to hide the variable of its parent class> this mech is called variable overriding.
In order to access the hidden parent class variable in the child class we require the help of super keyword. Through variable overriding java supports the concept of polymorphism

Method overding
In java it is possible for a method in the child class to have the same name as that of method in the parent class. This mechanism is called method overriding where the child class method hide the 
parent class method. In order to access the hidden parent class method in the child class we require the help of super keyword. Using Method overding, java supports the concept of polymorphism.

What is the use of super keyword?
If a parent class member is hidden by a child class member then in order to access the hidden parent class member in the child class we require the help of super keyword.

Use of final keyword
It have 3 uses:-
1. To create a naming constant.
2. To prevent method overriding.
3. To prevent inheritance of a class.

Use of this keyword
If a instance variable has the same name as that of the local variable then the local variable tends to hide the instance variable of the class. In order to resolve this name space 
collision we require the help of this keyword. this is a keyword which always refers to the instance variable of the class. 
